'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="KingDB")>  _
Partial Public Class KingDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertHall(instance As Hall)
    End Sub
  Partial Private Sub UpdateHall(instance As Hall)
    End Sub
  Partial Private Sub DeleteHall(instance As Hall)
    End Sub
  Partial Private Sub InsertTransaction_Detail(instance As Transaction_Detail)
    End Sub
  Partial Private Sub UpdateTransaction_Detail(instance As Transaction_Detail)
    End Sub
  Partial Private Sub DeleteTransaction_Detail(instance As Transaction_Detail)
    End Sub
  Partial Private Sub InsertMember(instance As Member)
    End Sub
  Partial Private Sub UpdateMember(instance As Member)
    End Sub
  Partial Private Sub DeleteMember(instance As Member)
    End Sub
  Partial Private Sub InsertMovie(instance As Movie)
    End Sub
  Partial Private Sub UpdateMovie(instance As Movie)
    End Sub
  Partial Private Sub DeleteMovie(instance As Movie)
    End Sub
  Partial Private Sub InsertSchedule(instance As Schedule)
    End Sub
  Partial Private Sub UpdateSchedule(instance As Schedule)
    End Sub
  Partial Private Sub DeleteSchedule(instance As Schedule)
    End Sub
  Partial Private Sub InsertStaff(instance As Staff)
    End Sub
  Partial Private Sub UpdateStaff(instance As Staff)
    End Sub
  Partial Private Sub DeleteStaff(instance As Staff)
    End Sub
  Partial Private Sub InsertTicket(instance As Ticket)
    End Sub
  Partial Private Sub UpdateTicket(instance As Ticket)
    End Sub
  Partial Private Sub DeleteTicket(instance As Ticket)
    End Sub
  Partial Private Sub InsertTicket_Detail(instance As Ticket_Detail)
    End Sub
  Partial Private Sub UpdateTicket_Detail(instance As Ticket_Detail)
    End Sub
  Partial Private Sub DeleteTicket_Detail(instance As Ticket_Detail)
    End Sub
  Partial Private Sub InsertTransaction(instance As Transaction)
    End Sub
  Partial Private Sub UpdateTransaction(instance As Transaction)
    End Sub
  Partial Private Sub DeleteTransaction(instance As Transaction)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.ProjectKing_Ticketing.My.MySettings.Default.DBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Halls() As System.Data.Linq.Table(Of Hall)
		Get
			Return Me.GetTable(Of Hall)
		End Get
	End Property
	
	Public ReadOnly Property Transaction_Details() As System.Data.Linq.Table(Of Transaction_Detail)
		Get
			Return Me.GetTable(Of Transaction_Detail)
		End Get
	End Property
	
	Public ReadOnly Property Members() As System.Data.Linq.Table(Of Member)
		Get
			Return Me.GetTable(Of Member)
		End Get
	End Property
	
	Public ReadOnly Property Movies() As System.Data.Linq.Table(Of Movie)
		Get
			Return Me.GetTable(Of Movie)
		End Get
	End Property
	
	Public ReadOnly Property Schedules() As System.Data.Linq.Table(Of Schedule)
		Get
			Return Me.GetTable(Of Schedule)
		End Get
	End Property
	
	Public ReadOnly Property Staffs() As System.Data.Linq.Table(Of Staff)
		Get
			Return Me.GetTable(Of Staff)
		End Get
	End Property
	
	Public ReadOnly Property Tickets() As System.Data.Linq.Table(Of Ticket)
		Get
			Return Me.GetTable(Of Ticket)
		End Get
	End Property
	
	Public ReadOnly Property Ticket_Details() As System.Data.Linq.Table(Of Ticket_Detail)
		Get
			Return Me.GetTable(Of Ticket_Detail)
		End Get
	End Property
	
	Public ReadOnly Property Transactions() As System.Data.Linq.Table(Of Transaction)
		Get
			Return Me.GetTable(Of Transaction)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Hall")>  _
Partial Public Class Hall
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Hall_Id As Integer
	
	Private _Hall_Type As String
	
	Private _Schedules As EntitySet(Of Schedule)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHall_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnHall_IdChanged()
    End Sub
    Partial Private Sub OnHall_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnHall_TypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Schedules = New EntitySet(Of Schedule)(AddressOf Me.attach_Schedules, AddressOf Me.detach_Schedules)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hall_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Hall_Id() As Integer
		Get
			Return Me._Hall_Id
		End Get
		Set
			If ((Me._Hall_Id = value)  _
						= false) Then
				Me.OnHall_IdChanging(value)
				Me.SendPropertyChanging
				Me._Hall_Id = value
				Me.SendPropertyChanged("Hall_Id")
				Me.OnHall_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hall_Type", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Hall_Type() As String
		Get
			Return Me._Hall_Type
		End Get
		Set
			If (String.Equals(Me._Hall_Type, value) = false) Then
				Me.OnHall_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Hall_Type = value
				Me.SendPropertyChanged("Hall_Type")
				Me.OnHall_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hall_Schedule", Storage:="_Schedules", ThisKey:="Hall_Id", OtherKey:="Hall_Id")>  _
	Public Property Schedules() As EntitySet(Of Schedule)
		Get
			Return Me._Schedules
		End Get
		Set
			Me._Schedules.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Schedules(ByVal entity As Schedule)
		Me.SendPropertyChanging
		entity.Hall = Me
	End Sub
	
	Private Sub detach_Schedules(ByVal entity As Schedule)
		Me.SendPropertyChanging
		entity.Hall = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Transaction_Detail")>  _
Partial Public Class Transaction_Detail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Transaction_Id As Integer
	
	Private _Seat_No As String
	
	Private _Transaction As EntityRef(Of Transaction)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTransaction_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTransaction_IdChanged()
    End Sub
    Partial Private Sub OnSeat_NoChanging(value As String)
    End Sub
    Partial Private Sub OnSeat_NoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Transaction = CType(Nothing, EntityRef(Of Transaction))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transaction_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Transaction_Id() As Integer
		Get
			Return Me._Transaction_Id
		End Get
		Set
			If ((Me._Transaction_Id = value)  _
						= false) Then
				If Me._Transaction.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTransaction_IdChanging(value)
				Me.SendPropertyChanging
				Me._Transaction_Id = value
				Me.SendPropertyChanged("Transaction_Id")
				Me.OnTransaction_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seat_No", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Seat_No() As String
		Get
			Return Me._Seat_No
		End Get
		Set
			If (String.Equals(Me._Seat_No, value) = false) Then
				Me.OnSeat_NoChanging(value)
				Me.SendPropertyChanging
				Me._Seat_No = value
				Me.SendPropertyChanged("Seat_No")
				Me.OnSeat_NoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Transaction_Transaction_Detail", Storage:="_Transaction", ThisKey:="Transaction_Id", OtherKey:="Transaction_Id", IsForeignKey:=true)>  _
	Public Property Transaction() As Transaction
		Get
			Return Me._Transaction.Entity
		End Get
		Set
			Dim previousValue As Transaction = Me._Transaction.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Transaction.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Transaction.Entity = Nothing
					previousValue.Transaction_Details.Remove(Me)
				End If
				Me._Transaction.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Transaction_Details.Add(Me)
					Me._Transaction_Id = value.Transaction_Id
				Else
					Me._Transaction_Id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Transaction")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Member")>  _
Partial Public Class Member
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Member_Id As String
	
	Private _Member_Photo As String
	
	Private _Member_Name As String
	
	Private _Member_PIN As Integer
	
	Private _Member_ICNO As String
	
	Private _Member_MobileNo As String
	
	Private _Member_Email As String
	
	Private _Member_BirthDate As System.Nullable(Of Date)
	
	Private _Member_JoinedDate As Date
	
	Private _Member_RewardPoint As Integer
	
	Private _Member_RewardPointExp As Date
	
	Private _Transactions As EntitySet(Of Transaction)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMember_IdChanging(value As String)
    End Sub
    Partial Private Sub OnMember_IdChanged()
    End Sub
    Partial Private Sub OnMember_PhotoChanging(value As String)
    End Sub
    Partial Private Sub OnMember_PhotoChanged()
    End Sub
    Partial Private Sub OnMember_NameChanging(value As String)
    End Sub
    Partial Private Sub OnMember_NameChanged()
    End Sub
    Partial Private Sub OnMember_PINChanging(value As Integer)
    End Sub
    Partial Private Sub OnMember_PINChanged()
    End Sub
    Partial Private Sub OnMember_ICNOChanging(value As String)
    End Sub
    Partial Private Sub OnMember_ICNOChanged()
    End Sub
    Partial Private Sub OnMember_MobileNoChanging(value As String)
    End Sub
    Partial Private Sub OnMember_MobileNoChanged()
    End Sub
    Partial Private Sub OnMember_EmailChanging(value As String)
    End Sub
    Partial Private Sub OnMember_EmailChanged()
    End Sub
    Partial Private Sub OnMember_BirthDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMember_BirthDateChanged()
    End Sub
    Partial Private Sub OnMember_JoinedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnMember_JoinedDateChanged()
    End Sub
    Partial Private Sub OnMember_RewardPointChanging(value As Integer)
    End Sub
    Partial Private Sub OnMember_RewardPointChanged()
    End Sub
    Partial Private Sub OnMember_RewardPointExpChanging(value As Date)
    End Sub
    Partial Private Sub OnMember_RewardPointExpChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Transactions = New EntitySet(Of Transaction)(AddressOf Me.attach_Transactions, AddressOf Me.detach_Transactions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Member_Id", DbType:="Char(8) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Member_Id() As String
		Get
			Return Me._Member_Id
		End Get
		Set
			If (String.Equals(Me._Member_Id, value) = false) Then
				Me.OnMember_IdChanging(value)
				Me.SendPropertyChanging
				Me._Member_Id = value
				Me.SendPropertyChanged("Member_Id")
				Me.OnMember_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Member_Photo", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Member_Photo() As String
		Get
			Return Me._Member_Photo
		End Get
		Set
			If (String.Equals(Me._Member_Photo, value) = false) Then
				Me.OnMember_PhotoChanging(value)
				Me.SendPropertyChanging
				Me._Member_Photo = value
				Me.SendPropertyChanged("Member_Photo")
				Me.OnMember_PhotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Member_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Member_Name() As String
		Get
			Return Me._Member_Name
		End Get
		Set
			If (String.Equals(Me._Member_Name, value) = false) Then
				Me.OnMember_NameChanging(value)
				Me.SendPropertyChanging
				Me._Member_Name = value
				Me.SendPropertyChanged("Member_Name")
				Me.OnMember_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Member_PIN", DbType:="Int NOT NULL")>  _
	Public Property Member_PIN() As Integer
		Get
			Return Me._Member_PIN
		End Get
		Set
			If ((Me._Member_PIN = value)  _
						= false) Then
				Me.OnMember_PINChanging(value)
				Me.SendPropertyChanging
				Me._Member_PIN = value
				Me.SendPropertyChanged("Member_PIN")
				Me.OnMember_PINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Member_ICNO", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Member_ICNO() As String
		Get
			Return Me._Member_ICNO
		End Get
		Set
			If (String.Equals(Me._Member_ICNO, value) = false) Then
				Me.OnMember_ICNOChanging(value)
				Me.SendPropertyChanging
				Me._Member_ICNO = value
				Me.SendPropertyChanged("Member_ICNO")
				Me.OnMember_ICNOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Member_MobileNo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Member_MobileNo() As String
		Get
			Return Me._Member_MobileNo
		End Get
		Set
			If (String.Equals(Me._Member_MobileNo, value) = false) Then
				Me.OnMember_MobileNoChanging(value)
				Me.SendPropertyChanging
				Me._Member_MobileNo = value
				Me.SendPropertyChanged("Member_MobileNo")
				Me.OnMember_MobileNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Member_Email", DbType:="VarChar(50)")>  _
	Public Property Member_Email() As String
		Get
			Return Me._Member_Email
		End Get
		Set
			If (String.Equals(Me._Member_Email, value) = false) Then
				Me.OnMember_EmailChanging(value)
				Me.SendPropertyChanging
				Me._Member_Email = value
				Me.SendPropertyChanged("Member_Email")
				Me.OnMember_EmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Member_BirthDate", DbType:="Date")>  _
	Public Property Member_BirthDate() As System.Nullable(Of Date)
		Get
			Return Me._Member_BirthDate
		End Get
		Set
			If (Me._Member_BirthDate.Equals(value) = false) Then
				Me.OnMember_BirthDateChanging(value)
				Me.SendPropertyChanging
				Me._Member_BirthDate = value
				Me.SendPropertyChanged("Member_BirthDate")
				Me.OnMember_BirthDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Member_JoinedDate", DbType:="Date NOT NULL")>  _
	Public Property Member_JoinedDate() As Date
		Get
			Return Me._Member_JoinedDate
		End Get
		Set
			If ((Me._Member_JoinedDate = value)  _
						= false) Then
				Me.OnMember_JoinedDateChanging(value)
				Me.SendPropertyChanging
				Me._Member_JoinedDate = value
				Me.SendPropertyChanged("Member_JoinedDate")
				Me.OnMember_JoinedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Member_RewardPoint", DbType:="Int NOT NULL")>  _
	Public Property Member_RewardPoint() As Integer
		Get
			Return Me._Member_RewardPoint
		End Get
		Set
			If ((Me._Member_RewardPoint = value)  _
						= false) Then
				Me.OnMember_RewardPointChanging(value)
				Me.SendPropertyChanging
				Me._Member_RewardPoint = value
				Me.SendPropertyChanged("Member_RewardPoint")
				Me.OnMember_RewardPointChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Member_RewardPointExp", DbType:="Date NOT NULL")>  _
	Public Property Member_RewardPointExp() As Date
		Get
			Return Me._Member_RewardPointExp
		End Get
		Set
			If ((Me._Member_RewardPointExp = value)  _
						= false) Then
				Me.OnMember_RewardPointExpChanging(value)
				Me.SendPropertyChanging
				Me._Member_RewardPointExp = value
				Me.SendPropertyChanged("Member_RewardPointExp")
				Me.OnMember_RewardPointExpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Member_Transaction", Storage:="_Transactions", ThisKey:="Member_Id", OtherKey:="Member_Id")>  _
	Public Property Transactions() As EntitySet(Of Transaction)
		Get
			Return Me._Transactions
		End Get
		Set
			Me._Transactions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Transactions(ByVal entity As Transaction)
		Me.SendPropertyChanging
		entity.Member = Me
	End Sub
	
	Private Sub detach_Transactions(ByVal entity As Transaction)
		Me.SendPropertyChanging
		entity.Member = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Movie")>  _
Partial Public Class Movie
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Movie_Id As Integer
	
	Private _Movie_Title As String
	
	Private _Movie_Desc As String
	
	Private _Movie_Rating As String
	
	Private _Movie_Status As String
	
	Private _Movie_Image As String
	
	Private _Schedules As EntitySet(Of Schedule)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMovie_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnMovie_IdChanged()
    End Sub
    Partial Private Sub OnMovie_TitleChanging(value As String)
    End Sub
    Partial Private Sub OnMovie_TitleChanged()
    End Sub
    Partial Private Sub OnMovie_DescChanging(value As String)
    End Sub
    Partial Private Sub OnMovie_DescChanged()
    End Sub
    Partial Private Sub OnMovie_RatingChanging(value As String)
    End Sub
    Partial Private Sub OnMovie_RatingChanged()
    End Sub
    Partial Private Sub OnMovie_StatusChanging(value As String)
    End Sub
    Partial Private Sub OnMovie_StatusChanged()
    End Sub
    Partial Private Sub OnMovie_ImageChanging(value As String)
    End Sub
    Partial Private Sub OnMovie_ImageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Schedules = New EntitySet(Of Schedule)(AddressOf Me.attach_Schedules, AddressOf Me.detach_Schedules)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movie_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Movie_Id() As Integer
		Get
			Return Me._Movie_Id
		End Get
		Set
			If ((Me._Movie_Id = value)  _
						= false) Then
				Me.OnMovie_IdChanging(value)
				Me.SendPropertyChanging
				Me._Movie_Id = value
				Me.SendPropertyChanged("Movie_Id")
				Me.OnMovie_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movie_Title", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Movie_Title() As String
		Get
			Return Me._Movie_Title
		End Get
		Set
			If (String.Equals(Me._Movie_Title, value) = false) Then
				Me.OnMovie_TitleChanging(value)
				Me.SendPropertyChanging
				Me._Movie_Title = value
				Me.SendPropertyChanged("Movie_Title")
				Me.OnMovie_TitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movie_Desc", DbType:="VarChar(255)")>  _
	Public Property Movie_Desc() As String
		Get
			Return Me._Movie_Desc
		End Get
		Set
			If (String.Equals(Me._Movie_Desc, value) = false) Then
				Me.OnMovie_DescChanging(value)
				Me.SendPropertyChanging
				Me._Movie_Desc = value
				Me.SendPropertyChanged("Movie_Desc")
				Me.OnMovie_DescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movie_Rating", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property Movie_Rating() As String
		Get
			Return Me._Movie_Rating
		End Get
		Set
			If (String.Equals(Me._Movie_Rating, value) = false) Then
				Me.OnMovie_RatingChanging(value)
				Me.SendPropertyChanging
				Me._Movie_Rating = value
				Me.SendPropertyChanged("Movie_Rating")
				Me.OnMovie_RatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movie_Status", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Movie_Status() As String
		Get
			Return Me._Movie_Status
		End Get
		Set
			If (String.Equals(Me._Movie_Status, value) = false) Then
				Me.OnMovie_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Movie_Status = value
				Me.SendPropertyChanged("Movie_Status")
				Me.OnMovie_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movie_Image", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Movie_Image() As String
		Get
			Return Me._Movie_Image
		End Get
		Set
			If (String.Equals(Me._Movie_Image, value) = false) Then
				Me.OnMovie_ImageChanging(value)
				Me.SendPropertyChanging
				Me._Movie_Image = value
				Me.SendPropertyChanged("Movie_Image")
				Me.OnMovie_ImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Movie_Schedule", Storage:="_Schedules", ThisKey:="Movie_Id", OtherKey:="Movie_Id")>  _
	Public Property Schedules() As EntitySet(Of Schedule)
		Get
			Return Me._Schedules
		End Get
		Set
			Me._Schedules.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Schedules(ByVal entity As Schedule)
		Me.SendPropertyChanging
		entity.Movie = Me
	End Sub
	
	Private Sub detach_Schedules(ByVal entity As Schedule)
		Me.SendPropertyChanging
		entity.Movie = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Schedule")>  _
Partial Public Class Schedule
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Schedule_Id As Integer
	
	Private _Start_Time As System.TimeSpan
	
	Private _End_Time As System.TimeSpan
	
	Private _Schedule_Date As Date
	
	Private _Schedule_Status As String
	
	Private _Movie_Id As Integer
	
	Private _Hall_Id As Integer
	
	Private _Transactions As EntitySet(Of Transaction)
	
	Private _Hall As EntityRef(Of Hall)
	
	Private _Movie As EntityRef(Of Movie)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchedule_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSchedule_IdChanged()
    End Sub
    Partial Private Sub OnStart_TimeChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnStart_TimeChanged()
    End Sub
    Partial Private Sub OnEnd_TimeChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnEnd_TimeChanged()
    End Sub
    Partial Private Sub OnSchedule_DateChanging(value As Date)
    End Sub
    Partial Private Sub OnSchedule_DateChanged()
    End Sub
    Partial Private Sub OnSchedule_StatusChanging(value As String)
    End Sub
    Partial Private Sub OnSchedule_StatusChanged()
    End Sub
    Partial Private Sub OnMovie_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnMovie_IdChanged()
    End Sub
    Partial Private Sub OnHall_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnHall_IdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Transactions = New EntitySet(Of Transaction)(AddressOf Me.attach_Transactions, AddressOf Me.detach_Transactions)
		Me._Hall = CType(Nothing, EntityRef(Of Hall))
		Me._Movie = CType(Nothing, EntityRef(Of Movie))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Schedule_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Schedule_Id() As Integer
		Get
			Return Me._Schedule_Id
		End Get
		Set
			If ((Me._Schedule_Id = value)  _
						= false) Then
				Me.OnSchedule_IdChanging(value)
				Me.SendPropertyChanging
				Me._Schedule_Id = value
				Me.SendPropertyChanged("Schedule_Id")
				Me.OnSchedule_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Start_Time", DbType:="Time NOT NULL")>  _
	Public Property Start_Time() As System.TimeSpan
		Get
			Return Me._Start_Time
		End Get
		Set
			If ((Me._Start_Time = value)  _
						= false) Then
				Me.OnStart_TimeChanging(value)
				Me.SendPropertyChanging
				Me._Start_Time = value
				Me.SendPropertyChanged("Start_Time")
				Me.OnStart_TimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_End_Time", DbType:="Time NOT NULL")>  _
	Public Property End_Time() As System.TimeSpan
		Get
			Return Me._End_Time
		End Get
		Set
			If ((Me._End_Time = value)  _
						= false) Then
				Me.OnEnd_TimeChanging(value)
				Me.SendPropertyChanging
				Me._End_Time = value
				Me.SendPropertyChanged("End_Time")
				Me.OnEnd_TimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Schedule_Date", DbType:="Date NOT NULL")>  _
	Public Property Schedule_Date() As Date
		Get
			Return Me._Schedule_Date
		End Get
		Set
			If ((Me._Schedule_Date = value)  _
						= false) Then
				Me.OnSchedule_DateChanging(value)
				Me.SendPropertyChanging
				Me._Schedule_Date = value
				Me.SendPropertyChanged("Schedule_Date")
				Me.OnSchedule_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Schedule_Status", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Schedule_Status() As String
		Get
			Return Me._Schedule_Status
		End Get
		Set
			If (String.Equals(Me._Schedule_Status, value) = false) Then
				Me.OnSchedule_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Schedule_Status = value
				Me.SendPropertyChanged("Schedule_Status")
				Me.OnSchedule_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movie_Id", DbType:="Int NOT NULL")>  _
	Public Property Movie_Id() As Integer
		Get
			Return Me._Movie_Id
		End Get
		Set
			If ((Me._Movie_Id = value)  _
						= false) Then
				If Me._Movie.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMovie_IdChanging(value)
				Me.SendPropertyChanging
				Me._Movie_Id = value
				Me.SendPropertyChanged("Movie_Id")
				Me.OnMovie_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hall_Id", DbType:="Int NOT NULL")>  _
	Public Property Hall_Id() As Integer
		Get
			Return Me._Hall_Id
		End Get
		Set
			If ((Me._Hall_Id = value)  _
						= false) Then
				If Me._Hall.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnHall_IdChanging(value)
				Me.SendPropertyChanging
				Me._Hall_Id = value
				Me.SendPropertyChanged("Hall_Id")
				Me.OnHall_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Schedule_Transaction", Storage:="_Transactions", ThisKey:="Schedule_Id", OtherKey:="Schedule_Id")>  _
	Public Property Transactions() As EntitySet(Of Transaction)
		Get
			Return Me._Transactions
		End Get
		Set
			Me._Transactions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hall_Schedule", Storage:="_Hall", ThisKey:="Hall_Id", OtherKey:="Hall_Id", IsForeignKey:=true)>  _
	Public Property Hall() As Hall
		Get
			Return Me._Hall.Entity
		End Get
		Set
			Dim previousValue As Hall = Me._Hall.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Hall.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Hall.Entity = Nothing
					previousValue.Schedules.Remove(Me)
				End If
				Me._Hall.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Schedules.Add(Me)
					Me._Hall_Id = value.Hall_Id
				Else
					Me._Hall_Id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Hall")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Movie_Schedule", Storage:="_Movie", ThisKey:="Movie_Id", OtherKey:="Movie_Id", IsForeignKey:=true)>  _
	Public Property Movie() As Movie
		Get
			Return Me._Movie.Entity
		End Get
		Set
			Dim previousValue As Movie = Me._Movie.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Movie.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Movie.Entity = Nothing
					previousValue.Schedules.Remove(Me)
				End If
				Me._Movie.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Schedules.Add(Me)
					Me._Movie_Id = value.Movie_Id
				Else
					Me._Movie_Id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Movie")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Transactions(ByVal entity As Transaction)
		Me.SendPropertyChanging
		entity.Schedule = Me
	End Sub
	
	Private Sub detach_Transactions(ByVal entity As Transaction)
		Me.SendPropertyChanging
		entity.Schedule = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff")>  _
Partial Public Class Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Staff_Id As String
	
	Private _Staff_Name As String
	
	Private _Staff_IC As String
	
	Private _Staff_Phone As String
	
	Private _Staff_Email As String
	
	Private _Staff_StartDate As Date
	
	Private _Staff_EndDate As System.Nullable(Of Date)
	
	Private _Staff_Gender As String
	
	Private _Staff_Status As String
	
	Private _Staff_Role As String
	
	Private _Staff_Password As String
	
	Private _Staff_DoB As Date
	
	Private _Staff_Picture As String
	
	Private _Staff_ResetPass As String
	
	Private _Transactions As EntitySet(Of Transaction)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaff_IdChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_IdChanged()
    End Sub
    Partial Private Sub OnStaff_NameChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_NameChanged()
    End Sub
    Partial Private Sub OnStaff_ICChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_ICChanged()
    End Sub
    Partial Private Sub OnStaff_PhoneChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_PhoneChanged()
    End Sub
    Partial Private Sub OnStaff_EmailChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_EmailChanged()
    End Sub
    Partial Private Sub OnStaff_StartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStaff_StartDateChanged()
    End Sub
    Partial Private Sub OnStaff_EndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStaff_EndDateChanged()
    End Sub
    Partial Private Sub OnStaff_GenderChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_GenderChanged()
    End Sub
    Partial Private Sub OnStaff_StatusChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_StatusChanged()
    End Sub
    Partial Private Sub OnStaff_RoleChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_RoleChanged()
    End Sub
    Partial Private Sub OnStaff_PasswordChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_PasswordChanged()
    End Sub
    Partial Private Sub OnStaff_DoBChanging(value As Date)
    End Sub
    Partial Private Sub OnStaff_DoBChanged()
    End Sub
    Partial Private Sub OnStaff_PictureChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_PictureChanged()
    End Sub
    Partial Private Sub OnStaff_ResetPassChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_ResetPassChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Transactions = New EntitySet(Of Transaction)(AddressOf Me.attach_Transactions, AddressOf Me.detach_Transactions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_Id", DbType:="Char(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Staff_Id() As String
		Get
			Return Me._Staff_Id
		End Get
		Set
			If (String.Equals(Me._Staff_Id, value) = false) Then
				Me.OnStaff_IdChanging(value)
				Me.SendPropertyChanging
				Me._Staff_Id = value
				Me.SendPropertyChanged("Staff_Id")
				Me.OnStaff_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_Name", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Staff_Name() As String
		Get
			Return Me._Staff_Name
		End Get
		Set
			If (String.Equals(Me._Staff_Name, value) = false) Then
				Me.OnStaff_NameChanging(value)
				Me.SendPropertyChanging
				Me._Staff_Name = value
				Me.SendPropertyChanged("Staff_Name")
				Me.OnStaff_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_IC", DbType:="VarChar(14) NOT NULL", CanBeNull:=false)>  _
	Public Property Staff_IC() As String
		Get
			Return Me._Staff_IC
		End Get
		Set
			If (String.Equals(Me._Staff_IC, value) = false) Then
				Me.OnStaff_ICChanging(value)
				Me.SendPropertyChanging
				Me._Staff_IC = value
				Me.SendPropertyChanged("Staff_IC")
				Me.OnStaff_ICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_Phone", DbType:="VarChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property Staff_Phone() As String
		Get
			Return Me._Staff_Phone
		End Get
		Set
			If (String.Equals(Me._Staff_Phone, value) = false) Then
				Me.OnStaff_PhoneChanging(value)
				Me.SendPropertyChanging
				Me._Staff_Phone = value
				Me.SendPropertyChanged("Staff_Phone")
				Me.OnStaff_PhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_Email", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Staff_Email() As String
		Get
			Return Me._Staff_Email
		End Get
		Set
			If (String.Equals(Me._Staff_Email, value) = false) Then
				Me.OnStaff_EmailChanging(value)
				Me.SendPropertyChanging
				Me._Staff_Email = value
				Me.SendPropertyChanged("Staff_Email")
				Me.OnStaff_EmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_StartDate", DbType:="Date NOT NULL")>  _
	Public Property Staff_StartDate() As Date
		Get
			Return Me._Staff_StartDate
		End Get
		Set
			If ((Me._Staff_StartDate = value)  _
						= false) Then
				Me.OnStaff_StartDateChanging(value)
				Me.SendPropertyChanging
				Me._Staff_StartDate = value
				Me.SendPropertyChanged("Staff_StartDate")
				Me.OnStaff_StartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_EndDate", DbType:="Date")>  _
	Public Property Staff_EndDate() As System.Nullable(Of Date)
		Get
			Return Me._Staff_EndDate
		End Get
		Set
			If (Me._Staff_EndDate.Equals(value) = false) Then
				Me.OnStaff_EndDateChanging(value)
				Me.SendPropertyChanging
				Me._Staff_EndDate = value
				Me.SendPropertyChanged("Staff_EndDate")
				Me.OnStaff_EndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_Gender", DbType:="VarChar(6) NOT NULL", CanBeNull:=false)>  _
	Public Property Staff_Gender() As String
		Get
			Return Me._Staff_Gender
		End Get
		Set
			If (String.Equals(Me._Staff_Gender, value) = false) Then
				Me.OnStaff_GenderChanging(value)
				Me.SendPropertyChanging
				Me._Staff_Gender = value
				Me.SendPropertyChanged("Staff_Gender")
				Me.OnStaff_GenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_Status", DbType:="VarChar(8) NOT NULL", CanBeNull:=false)>  _
	Public Property Staff_Status() As String
		Get
			Return Me._Staff_Status
		End Get
		Set
			If (String.Equals(Me._Staff_Status, value) = false) Then
				Me.OnStaff_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Staff_Status = value
				Me.SendPropertyChanged("Staff_Status")
				Me.OnStaff_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_Role", DbType:="VarChar(7) NOT NULL", CanBeNull:=false)>  _
	Public Property Staff_Role() As String
		Get
			Return Me._Staff_Role
		End Get
		Set
			If (String.Equals(Me._Staff_Role, value) = false) Then
				Me.OnStaff_RoleChanging(value)
				Me.SendPropertyChanging
				Me._Staff_Role = value
				Me.SendPropertyChanged("Staff_Role")
				Me.OnStaff_RoleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_Password", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Staff_Password() As String
		Get
			Return Me._Staff_Password
		End Get
		Set
			If (String.Equals(Me._Staff_Password, value) = false) Then
				Me.OnStaff_PasswordChanging(value)
				Me.SendPropertyChanging
				Me._Staff_Password = value
				Me.SendPropertyChanged("Staff_Password")
				Me.OnStaff_PasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_DoB", DbType:="Date NOT NULL")>  _
	Public Property Staff_DoB() As Date
		Get
			Return Me._Staff_DoB
		End Get
		Set
			If ((Me._Staff_DoB = value)  _
						= false) Then
				Me.OnStaff_DoBChanging(value)
				Me.SendPropertyChanging
				Me._Staff_DoB = value
				Me.SendPropertyChanged("Staff_DoB")
				Me.OnStaff_DoBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_Picture", DbType:="VarChar(100)")>  _
	Public Property Staff_Picture() As String
		Get
			Return Me._Staff_Picture
		End Get
		Set
			If (String.Equals(Me._Staff_Picture, value) = false) Then
				Me.OnStaff_PictureChanging(value)
				Me.SendPropertyChanging
				Me._Staff_Picture = value
				Me.SendPropertyChanged("Staff_Picture")
				Me.OnStaff_PictureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_ResetPass", DbType:="VarChar(30)")>  _
	Public Property Staff_ResetPass() As String
		Get
			Return Me._Staff_ResetPass
		End Get
		Set
			If (String.Equals(Me._Staff_ResetPass, value) = false) Then
				Me.OnStaff_ResetPassChanging(value)
				Me.SendPropertyChanging
				Me._Staff_ResetPass = value
				Me.SendPropertyChanged("Staff_ResetPass")
				Me.OnStaff_ResetPassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_Transaction", Storage:="_Transactions", ThisKey:="Staff_Id", OtherKey:="Staff_Id")>  _
	Public Property Transactions() As EntitySet(Of Transaction)
		Get
			Return Me._Transactions
		End Get
		Set
			Me._Transactions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Transactions(ByVal entity As Transaction)
		Me.SendPropertyChanging
		entity.Staff = Me
	End Sub
	
	Private Sub detach_Transactions(ByVal entity As Transaction)
		Me.SendPropertyChanging
		entity.Staff = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ticket")>  _
Partial Public Class Ticket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Ticket_Id As Integer
	
	Private _Ticket_Type As String
	
	Private _Ticket_Price As Decimal
	
	Private _Ticket_Details As EntitySet(Of Ticket_Detail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTicket_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTicket_IdChanged()
    End Sub
    Partial Private Sub OnTicket_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnTicket_TypeChanged()
    End Sub
    Partial Private Sub OnTicket_PriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTicket_PriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ticket_Details = New EntitySet(Of Ticket_Detail)(AddressOf Me.attach_Ticket_Details, AddressOf Me.detach_Ticket_Details)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ticket_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Ticket_Id() As Integer
		Get
			Return Me._Ticket_Id
		End Get
		Set
			If ((Me._Ticket_Id = value)  _
						= false) Then
				Me.OnTicket_IdChanging(value)
				Me.SendPropertyChanging
				Me._Ticket_Id = value
				Me.SendPropertyChanged("Ticket_Id")
				Me.OnTicket_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ticket_Type", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Ticket_Type() As String
		Get
			Return Me._Ticket_Type
		End Get
		Set
			If (String.Equals(Me._Ticket_Type, value) = false) Then
				Me.OnTicket_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Ticket_Type = value
				Me.SendPropertyChanged("Ticket_Type")
				Me.OnTicket_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ticket_Price", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property Ticket_Price() As Decimal
		Get
			Return Me._Ticket_Price
		End Get
		Set
			If ((Me._Ticket_Price = value)  _
						= false) Then
				Me.OnTicket_PriceChanging(value)
				Me.SendPropertyChanging
				Me._Ticket_Price = value
				Me.SendPropertyChanged("Ticket_Price")
				Me.OnTicket_PriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ticket_Ticket_Detail", Storage:="_Ticket_Details", ThisKey:="Ticket_Id", OtherKey:="Ticket_Id")>  _
	Public Property Ticket_Details() As EntitySet(Of Ticket_Detail)
		Get
			Return Me._Ticket_Details
		End Get
		Set
			Me._Ticket_Details.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Ticket_Details(ByVal entity As Ticket_Detail)
		Me.SendPropertyChanging
		entity.Ticket = Me
	End Sub
	
	Private Sub detach_Ticket_Details(ByVal entity As Ticket_Detail)
		Me.SendPropertyChanging
		entity.Ticket = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ticket_Detail")>  _
Partial Public Class Ticket_Detail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Ticket_Id As Integer
	
	Private _Transaction_Id As Integer
	
	Private _Quantity As Integer
	
	Private _Ticket_Price As Decimal
	
	Private _Ticket As EntityRef(Of Ticket)
	
	Private _Transaction As EntityRef(Of Transaction)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTicket_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTicket_IdChanged()
    End Sub
    Partial Private Sub OnTransaction_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTransaction_IdChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnTicket_PriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTicket_PriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ticket = CType(Nothing, EntityRef(Of Ticket))
		Me._Transaction = CType(Nothing, EntityRef(Of Transaction))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ticket_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Ticket_Id() As Integer
		Get
			Return Me._Ticket_Id
		End Get
		Set
			If ((Me._Ticket_Id = value)  _
						= false) Then
				If Me._Ticket.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTicket_IdChanging(value)
				Me.SendPropertyChanging
				Me._Ticket_Id = value
				Me.SendPropertyChanged("Ticket_Id")
				Me.OnTicket_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transaction_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Transaction_Id() As Integer
		Get
			Return Me._Transaction_Id
		End Get
		Set
			If ((Me._Transaction_Id = value)  _
						= false) Then
				If Me._Transaction.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTransaction_IdChanging(value)
				Me.SendPropertyChanging
				Me._Transaction_Id = value
				Me.SendPropertyChanged("Transaction_Id")
				Me.OnTransaction_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int NOT NULL")>  _
	Public Property Quantity() As Integer
		Get
			Return Me._Quantity
		End Get
		Set
			If ((Me._Quantity = value)  _
						= false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ticket_Price", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property Ticket_Price() As Decimal
		Get
			Return Me._Ticket_Price
		End Get
		Set
			If ((Me._Ticket_Price = value)  _
						= false) Then
				Me.OnTicket_PriceChanging(value)
				Me.SendPropertyChanging
				Me._Ticket_Price = value
				Me.SendPropertyChanged("Ticket_Price")
				Me.OnTicket_PriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ticket_Ticket_Detail", Storage:="_Ticket", ThisKey:="Ticket_Id", OtherKey:="Ticket_Id", IsForeignKey:=true)>  _
	Public Property Ticket() As Ticket
		Get
			Return Me._Ticket.Entity
		End Get
		Set
			Dim previousValue As Ticket = Me._Ticket.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ticket.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ticket.Entity = Nothing
					previousValue.Ticket_Details.Remove(Me)
				End If
				Me._Ticket.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ticket_Details.Add(Me)
					Me._Ticket_Id = value.Ticket_Id
				Else
					Me._Ticket_Id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Ticket")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Transaction_Ticket_Detail", Storage:="_Transaction", ThisKey:="Transaction_Id", OtherKey:="Transaction_Id", IsForeignKey:=true)>  _
	Public Property Transaction() As Transaction
		Get
			Return Me._Transaction.Entity
		End Get
		Set
			Dim previousValue As Transaction = Me._Transaction.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Transaction.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Transaction.Entity = Nothing
					previousValue.Ticket_Details.Remove(Me)
				End If
				Me._Transaction.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ticket_Details.Add(Me)
					Me._Transaction_Id = value.Transaction_Id
				Else
					Me._Transaction_Id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Transaction")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Transaction]")>  _
Partial Public Class Transaction
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Transaction_Id As Integer
	
	Private _Schedule_Id As Integer
	
	Private _Staff_Id As String
	
	Private _Member_Id As String
	
	Private _Transaction_Status As String
	
	Private _Amount_Payable As Decimal
	
	Private _Points_Earned As Integer
	
	Private _Payment_Method As String
	
	Private _Transaction_Date As Date
	
	Private _Transaction_Details As EntitySet(Of Transaction_Detail)
	
	Private _Ticket_Details As EntitySet(Of Ticket_Detail)
	
	Private _Member As EntityRef(Of Member)
	
	Private _Schedule As EntityRef(Of Schedule)
	
	Private _Staff As EntityRef(Of Staff)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTransaction_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTransaction_IdChanged()
    End Sub
    Partial Private Sub OnSchedule_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSchedule_IdChanged()
    End Sub
    Partial Private Sub OnStaff_IdChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_IdChanged()
    End Sub
    Partial Private Sub OnMember_IdChanging(value As String)
    End Sub
    Partial Private Sub OnMember_IdChanged()
    End Sub
    Partial Private Sub OnTransaction_StatusChanging(value As String)
    End Sub
    Partial Private Sub OnTransaction_StatusChanged()
    End Sub
    Partial Private Sub OnAmount_PayableChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmount_PayableChanged()
    End Sub
    Partial Private Sub OnPoints_EarnedChanging(value As Integer)
    End Sub
    Partial Private Sub OnPoints_EarnedChanged()
    End Sub
    Partial Private Sub OnPayment_MethodChanging(value As String)
    End Sub
    Partial Private Sub OnPayment_MethodChanged()
    End Sub
    Partial Private Sub OnTransaction_DateChanging(value As Date)
    End Sub
    Partial Private Sub OnTransaction_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Transaction_Details = New EntitySet(Of Transaction_Detail)(AddressOf Me.attach_Transaction_Details, AddressOf Me.detach_Transaction_Details)
		Me._Ticket_Details = New EntitySet(Of Ticket_Detail)(AddressOf Me.attach_Ticket_Details, AddressOf Me.detach_Ticket_Details)
		Me._Member = CType(Nothing, EntityRef(Of Member))
		Me._Schedule = CType(Nothing, EntityRef(Of Schedule))
		Me._Staff = CType(Nothing, EntityRef(Of Staff))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transaction_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Transaction_Id() As Integer
		Get
			Return Me._Transaction_Id
		End Get
		Set
			If ((Me._Transaction_Id = value)  _
						= false) Then
				Me.OnTransaction_IdChanging(value)
				Me.SendPropertyChanging
				Me._Transaction_Id = value
				Me.SendPropertyChanged("Transaction_Id")
				Me.OnTransaction_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Schedule_Id", DbType:="Int NOT NULL")>  _
	Public Property Schedule_Id() As Integer
		Get
			Return Me._Schedule_Id
		End Get
		Set
			If ((Me._Schedule_Id = value)  _
						= false) Then
				If Me._Schedule.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSchedule_IdChanging(value)
				Me.SendPropertyChanging
				Me._Schedule_Id = value
				Me.SendPropertyChanged("Schedule_Id")
				Me.OnSchedule_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_Id", DbType:="Char(5) NOT NULL", CanBeNull:=false)>  _
	Public Property Staff_Id() As String
		Get
			Return Me._Staff_Id
		End Get
		Set
			If (String.Equals(Me._Staff_Id, value) = false) Then
				If Me._Staff.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaff_IdChanging(value)
				Me.SendPropertyChanging
				Me._Staff_Id = value
				Me.SendPropertyChanged("Staff_Id")
				Me.OnStaff_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Member_Id", DbType:="Char(8)")>  _
	Public Property Member_Id() As String
		Get
			Return Me._Member_Id
		End Get
		Set
			If (String.Equals(Me._Member_Id, value) = false) Then
				If Me._Member.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMember_IdChanging(value)
				Me.SendPropertyChanging
				Me._Member_Id = value
				Me.SendPropertyChanged("Member_Id")
				Me.OnMember_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transaction_Status", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Transaction_Status() As String
		Get
			Return Me._Transaction_Status
		End Get
		Set
			If (String.Equals(Me._Transaction_Status, value) = false) Then
				Me.OnTransaction_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Transaction_Status = value
				Me.SendPropertyChanged("Transaction_Status")
				Me.OnTransaction_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount_Payable", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Amount_Payable() As Decimal
		Get
			Return Me._Amount_Payable
		End Get
		Set
			If ((Me._Amount_Payable = value)  _
						= false) Then
				Me.OnAmount_PayableChanging(value)
				Me.SendPropertyChanging
				Me._Amount_Payable = value
				Me.SendPropertyChanged("Amount_Payable")
				Me.OnAmount_PayableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Points_Earned", DbType:="Int NOT NULL")>  _
	Public Property Points_Earned() As Integer
		Get
			Return Me._Points_Earned
		End Get
		Set
			If ((Me._Points_Earned = value)  _
						= false) Then
				Me.OnPoints_EarnedChanging(value)
				Me.SendPropertyChanging
				Me._Points_Earned = value
				Me.SendPropertyChanged("Points_Earned")
				Me.OnPoints_EarnedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Payment_Method", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Payment_Method() As String
		Get
			Return Me._Payment_Method
		End Get
		Set
			If (String.Equals(Me._Payment_Method, value) = false) Then
				Me.OnPayment_MethodChanging(value)
				Me.SendPropertyChanging
				Me._Payment_Method = value
				Me.SendPropertyChanged("Payment_Method")
				Me.OnPayment_MethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transaction_Date", DbType:="DateTime NOT NULL")>  _
	Public Property Transaction_Date() As Date
		Get
			Return Me._Transaction_Date
		End Get
		Set
			If ((Me._Transaction_Date = value)  _
						= false) Then
				Me.OnTransaction_DateChanging(value)
				Me.SendPropertyChanging
				Me._Transaction_Date = value
				Me.SendPropertyChanged("Transaction_Date")
				Me.OnTransaction_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Transaction_Transaction_Detail", Storage:="_Transaction_Details", ThisKey:="Transaction_Id", OtherKey:="Transaction_Id")>  _
	Public Property Transaction_Details() As EntitySet(Of Transaction_Detail)
		Get
			Return Me._Transaction_Details
		End Get
		Set
			Me._Transaction_Details.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Transaction_Ticket_Detail", Storage:="_Ticket_Details", ThisKey:="Transaction_Id", OtherKey:="Transaction_Id")>  _
	Public Property Ticket_Details() As EntitySet(Of Ticket_Detail)
		Get
			Return Me._Ticket_Details
		End Get
		Set
			Me._Ticket_Details.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Member_Transaction", Storage:="_Member", ThisKey:="Member_Id", OtherKey:="Member_Id", IsForeignKey:=true)>  _
	Public Property Member() As Member
		Get
			Return Me._Member.Entity
		End Get
		Set
			Dim previousValue As Member = Me._Member.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Member.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Member.Entity = Nothing
					previousValue.Transactions.Remove(Me)
				End If
				Me._Member.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Transactions.Add(Me)
					Me._Member_Id = value.Member_Id
				Else
					Me._Member_Id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Member")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Schedule_Transaction", Storage:="_Schedule", ThisKey:="Schedule_Id", OtherKey:="Schedule_Id", IsForeignKey:=true)>  _
	Public Property Schedule() As Schedule
		Get
			Return Me._Schedule.Entity
		End Get
		Set
			Dim previousValue As Schedule = Me._Schedule.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Schedule.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Schedule.Entity = Nothing
					previousValue.Transactions.Remove(Me)
				End If
				Me._Schedule.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Transactions.Add(Me)
					Me._Schedule_Id = value.Schedule_Id
				Else
					Me._Schedule_Id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Schedule")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_Transaction", Storage:="_Staff", ThisKey:="Staff_Id", OtherKey:="Staff_Id", IsForeignKey:=true)>  _
	Public Property Staff() As Staff
		Get
			Return Me._Staff.Entity
		End Get
		Set
			Dim previousValue As Staff = Me._Staff.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Staff.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Staff.Entity = Nothing
					previousValue.Transactions.Remove(Me)
				End If
				Me._Staff.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Transactions.Add(Me)
					Me._Staff_Id = value.Staff_Id
				Else
					Me._Staff_Id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Staff")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Transaction_Details(ByVal entity As Transaction_Detail)
		Me.SendPropertyChanging
		entity.Transaction = Me
	End Sub
	
	Private Sub detach_Transaction_Details(ByVal entity As Transaction_Detail)
		Me.SendPropertyChanging
		entity.Transaction = Nothing
	End Sub
	
	Private Sub attach_Ticket_Details(ByVal entity As Ticket_Detail)
		Me.SendPropertyChanging
		entity.Transaction = Me
	End Sub
	
	Private Sub detach_Ticket_Details(ByVal entity As Ticket_Detail)
		Me.SendPropertyChanging
		entity.Transaction = Nothing
	End Sub
End Class
